---
interface Props {
    dice: string | number[][]
    complex: boolean
    norm?: number
    debug?: boolean
}

const {dice, complex, norm, debug} = Astro.props

function parseSimpleDiceExpression(diceExpression: string) {
    const [num_dice, dice_sides] = diceExpression.split('d').map(n => Number.parseInt(n));
    return Array.from(
        {length: num_dice},
        () => (
            Array.from( 
                {length: dice_sides},
                (value, index) => 1 + index
            )
        ) 
    );
}

function calcAllSumsOfDice(dice: number[][]) {
    return dice.reduce(
        (acc: number[], curr: number[]) => (
            acc.flatMap(x => 
                curr.map(y => x + y)
            )
        )
    )
}

const raw_vals = calcAllSumsOfDice(
    typeof dice === "string" 
    ? parseSimpleDiceExpression(dice)
    : dice
    ).sort((a, b) => a - b);

const binned_values = [...new Set(raw_vals)].map(
    (val: number) => ( raw_vals.filter(num => num === val) ) );

const probabilities = binned_values.map(val => (val.length / raw_vals.length) * 100);

const largest = ( [...probabilities].sort((a, b) => a - b).pop() as number )

const scale_factor = 100 / ( norm ?? largest )

if (import.meta.env.DEV && (debug ?? false)) {
    console.log(`######################### \n Input value: ${dice}`)
    console.log(raw_vals)
    console.log(binned_values)
    console.log(probabilities)
    console.log(`Input value: ${dice} \n***********************`)
}

---

<div class="not-prose   min-h-[200px] relative p-4 border-space-600 border-t shadow-xl">
    {
        probabilities.map((odds, index) => (
            <div class="grid grid-cols-[160px_10fr] my-4" style="position:relative; width: 100%; height: 100%;">
                <div class="no-wrap grid grid-cols-[1fr_2fr] font-mono bg-space-700 py-1" style={` position: relative; left: 0px; font-size: 16px; text-align: left; `}>
                    <div class="text-right  pl-2">{binned_values[index][0] }: </div>
                    <div class="text-right pr-2"> {odds.toFixed(2)}%</div>
                </div>
                <div class="bg-space-500" style={`height: 100%; width: ${Math.min(odds * scale_factor, 100) }%; position: relative; left:0px`}>
                    
                </div>

            </div>
        ))
    }
    <div class="grid grid-cols-[160px_10fr] mb-16 border-t border-space-700">
        <div class="h-4"></div>
        <div class="h-4 relative">
            {
                [0.0, 0.2, 0.4, 0.6, 0.8, 1.0].map((offset, index) => (
                    <span class="border-l border-space-700 h-full" style={`position: absolute; left: ${offset * 100}%`}> 
                        <span class="rotate-[55deg] origin-top-left block absolute  translate-y-[50%] ">
                            {(offset * ( norm ?? largest )).toFixed(0) }% 
                        </span>
                    </span>
                ))
            }
        </div>
    </div>
    <div class="border-t border-space-700">
        <div class="text-center font-mono text-xl mt-4">
            <slot>The {JSON.stringify(dice)} distribution</slot>
        </div>
    </div>

</div>